#!/usr/bin/env python

#
# HEROX Coordinator
# Implements
#   1) Mission management (teach waypoints, store/load missions, execute mission by sending goals to move_base)
#   2) Benchmark execution (run mission X times, measure and store accuracy at each waypoint using AprilTags)
#

import os
import rospy
import rosbag
import actionlib
import tf
import glob
from mission import Mission
from waypoint import MissionWaypoint
from geometry_msgs.msg import Pose, PoseStamped, PoseArray, Vector3
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import Header, ColorRGBA
from std_srvs.srv import Trigger
from nav_msgs.msg import Path
from nav_msgs.srv import GetPlan
from herox_coordinator.msg import Mission as MissionMessage, Missions as MissionsMessage
from herox_coordinator.srv import NewMission, LoadMission, SaveMission, WaypointAction
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalID
from apriltag_ros.msg import AprilTagDetectionArray

currentMission = Mission()
missionsPath = 'herox_coordinator/missions'
poseTimer = None

#
# SERVICE HANDLERS
#
def handle_load_mission(request):
  global currentMission

  print('Loading mission ' + request.name + '...')
  bag = rosbag.Bag(os.path.join(missionsPath, request.name))
  currentMission = Mission(bag)
  bag.close()
  publish_current_mission()
  return True

def handle_new_mission(request):
  global currentMission

  print('Creating new mission...')
  currentMission = Mission()
  publish_current_mission()
  return True

def get_missions():
  return [os.path.basename(p) for p in glob.glob(os.path.join(missionsPath, '*.bag'))]

def publish_missions():
  global missionPub

  missionsMsg = MissionsMessage()
  missionsMsg.missions = get_missions()
  missionPub.publish(missionsMsg)

def publish_current_mission():
  global currentMissionPub
  global missionWaypointsPub
  global currentMission

  # Publish current mission
  msg = MissionMessage()
  msg.name = currentMission.name
  msg.waypoints = [wp.get_msg() for wp in currentMission.waypoints]
  currentMissionPub.publish(msg)

  # Publish markers
  msg = MarkerArray()
  msg.markers = []
  for idx, wp in enumerate(currentMission.waypoints):
    marker = Marker()
    marker.header = Header()
    marker.header.stamp = rospy.Time.now()
    marker.header.frame_id = 'map'
    marker.ns = 'mission_waypoints'
    marker.id = idx
    marker.type = Marker.ARROW
    marker.action = Marker.ADD
    marker.pose = wp.pose
    marker.scale = Vector3(0.5,0.1,0.1)
    marker.color = ColorRGBA(0,0,1,1)
    msg.markers.append(marker)
  # current WP marker
  marker = Marker()
  marker.header = Header()
  marker.header.stamp = rospy.Time.now()
  marker.header.frame_id = 'map'
  marker.ns = 'current_wp'
  marker.id = len(currentMission.waypoints) + 1
  marker.type = Marker.CYLINDER
  if currentMission.get_current_waypoint() is not None:
    marker.action = Marker.ADD
    marker.pose = currentMission.get_current_waypoint().pose
    marker.scale = Vector3(0.25,0.25,0.25)
    marker.color = ColorRGBA(1,0,1,1)
  else:
    marker.action = Marker.DELETE
    
  msg.markers.append(marker)
  missionMarkersPub.publish(msg)
  
def handle_save_mission(request):
  global currentMission

  print('Saving current mission to ' + request.name)
  filename = os.path.join(missionsPath, request.name)
  bag = rosbag.Bag(filename, 'w')
  currentMission.save_to_bag(bag)
  bag.close()
  publish_missions()
  return True

def handle_start_mission(request):
  global currentMission
  global poseTimer

  print('Starting mission.')

  # Reset mission waypoint counter
  currentMission.reset(request.start_waypoint)

  # Clear pahts of all waypoints
  for wp in currentMission.waypoints:
    wp.clear_path()

  # Start timer for pose recording
  poseTimer = rospy.Timer(rospy.Duration(0.2), poseTimerCallback)

  # Send first goal to move_base
  wp = currentMission.next_waypoint()
  if wp is None:
    return(False,"Failed to start mission, no waypoint was returned")
  publish_current_mission()

  print('Sending waypoint ' + str(currentMission.currentGoal))
  send_waypoint(wp.pose)
  return (True, "")

def handle_add_waypoint(request):
  global currentMission

  print('Adding waypoint at current pose')
  pose = get_robot_pose()
  tag = get_tag_in_frame()
  if tag is None:
    print('No tag in frame! Waypoint not added.')
    return

  measurement = get_measurement(tag)
  currentMission.add_waypoint(pose, tag, measurement)
  publish_current_mission()
  return (True, "")

def handle_stop_mission(request):
  global currentMission
  global mbClient
  global poseTimer

  if poseTimer is not None:
    poseTimer.shutdown()
    poseTimer = None

  print('Stopping mission.')
  mbClient.cancel_all_goals()
  return (True, "")

def handle_wp_up(request):
  global currentMission
  currentMission.waypoints.insert(request.wpid - 1, currentMission.waypoints.pop(request.wpid))
  publish_current_mission()
  return True
  
def handle_wp_down(request):
  global currentMission
  currentMission.waypoints.insert(request.wpid + 1, currentMission.waypoints.pop(request.wpid))
  publish_current_mission()
  return True
  
def handle_wp_set_tag(request):
  global currentMission

  try:
    tagid = int(request.data)
    print("Changing tag of WP " + str(request.wpid) + " to " + request.data)
    currentMission.waypoints[request.wpid].tag = request.data
    publish_current_mission()
    return True
  except:
    print("Invalid value "  + str(request.data) + " for tag ID")
    return False

def handle_wp_remove(request):
  global currentMission
  currentMission.waypoints.pop(request.wpid)
  publish_current_mission()
  return True

def handle_wp_set_id(request):
  global currentMission
  currentMission.waypoints[request.wpid].waypoint_id = request.data
  return True
  
def handle_add_shortest_paths(request):
  global currentMission
  global getPlanSrv
  
  last_pose = None
  for wp in currentMission.waypoints:
    if last_pose is not None:
      plan = getPlanSrv(stamp_pose(last_pose),stamp_pose(wp.pose),0.01).plan
      wp.set_shortest_path([p.pose for p in plan.poses])
    
    last_pose = wp.pose

  publish_current_mission()
  return (True,"")

def handle_clear_visits(request):
  for wp in currentMission.waypoints:
    del wp.visits[:]
  publish_current_mission()
  return (True,"")

#
# SUBSCRIBER HANDLERS
#
def handle_new_waypoint(msg):
  global currentMission

  rospy.loginfo("Got new waypoint: %f,%f,%f %f,%f,%f,%f", msg.position.x, msg.position.y, msg.position.z, msg.orientation.x, msg.orientation.y, msg.orientation.z, msg.orientation.w)
  currentMission.add_waypoint(msg)
  publish_current_mission()

def handle_tag_detections(msg):
  global current_tag
  
  if len(msg.detections) > 0:
    current_tag = msg.detections[0].id[0]
  else:
    current_tag = None

#
# ACTION CALLBACK HANDLERS
#
def handle_move_base_feedback(fb):
  rospy.loginfo("Got feedback: %s", str(fb))

def handle_move_base_done(state, result):
  global currentMission
  global getPlanSrv
  global poseTimer

  rospy.loginfo("move_base is done")
  rospy.loginfo("State: %s", str(state))
  rospy.loginfo("Result: %s", str(result))

  if state != actionlib.GoalStatus.SUCCEEDED:
    rospy.loginfo("move_base FAILED on waypoint %d!", currentMission.currentGoal)
    return

  # Get measurement
  rospy.loginfo("Acquiring measurement for waypoint...")
  rospy.sleep(2)
  try:
    meas = get_measurement(currentMission.get_current_waypoint().tag)
    rospy.loginfo("Got measurement: %f,%f,%f %f,%f,%f,%f", meas.position.x, meas.position.y, meas.position.z, meas.orientation.x, meas.orientation.y, meas.orientation.z, meas.orientation.w)
  except tf.LookupException:
    rospy.loginfo("Could not acquire measurement for tag '%s' because it was not detected in frame.", currentMission.get_current_waypoint().tag)
    return

  currentMission.add_visit(meas)

  nextWP = currentMission.next_waypoint()
  publish_current_mission()
  if nextWP is None:
    print('Mission finished')
    if poseTimer is not None:
      poseTimer.shutdown()
      poseTimer = None
    return

  print('Sending waypoint ' + str(currentMission.currentGoal))
  send_waypoint(nextWP.pose)


#
# HELPERS
#

def send_waypoint(pose):
  global mbClient

  goal = MoveBaseGoal()
  goal.target_pose.header.frame_id = "map"
  goal.target_pose.header.stamp = rospy.Time.now()
  goal.target_pose.pose = pose

  mbClient.send_goal(goal, done_cb=handle_move_base_done)

def get_transform_pose(source_frame, target_frame):
  (trans, rot) = tfListener.lookupTransform(source_frame, target_frame, rospy.Time(0))
  pose = Pose()
  pose.position.x = trans[0]
  pose.position.y = trans[1]
  pose.position.z = trans[2]
  pose.orientation.x = rot[0]
  pose.orientation.y = rot[1]
  pose.orientation.z = rot[2]
  pose.orientation.w = rot[3]

  return pose

def stamp_pose(pose, frame_id='map'):
  poseStamped = PoseStamped()
  poseStamped.pose = pose
  poseStamped.header = Header()
  poseStamped.header.stamp = rospy.Time.now()
  poseStamped.header.frame_id = frame_id
  return poseStamped

def get_robot_pose():
  return get_transform_pose('/map', '/base_link')

# Gets the pose of the given apriltag, relative to base_link
def get_measurement(tagid):
  return get_transform_pose('/base_link', '/' + 'tag_' + str(tagid))

# Gets the first detected tag in frame
def get_tag_in_frame():
  return current_tag
  

def poseTimerCallback(event):
  global currentMission

  pose = stamp_pose(get_robot_pose())
  currentMission.add_pose_to_path(pose)

#
# MAIN FUNCTION
#
def coordinator_main():
  global loadSrv, newSrv, saveSrv, startSrv, stopSrv, wpSrv
  global wpSub
  global mbClient
  global tfListener
  global missionPub
  global tagSub
  global currentMissionPub
  global missionMarkersPub
  global getPlanSrv

  rospy.init_node('herox_coordinator')
  #pub = rospy.Publisher('subsystem_status', SubsystemStatus, queue_size=10)
  loadSrv = rospy.Service('load_mission', LoadMission, handle_load_mission)
  newSrv = rospy.Service('new_mission', NewMission, handle_new_mission)
  saveSrv = rospy.Service('save_mission', SaveMission, handle_save_mission)
  startSrv = rospy.Service('start_mission', Trigger, handle_start_mission)
  stopSrv = rospy.Service('stop_mission', Trigger, handle_stop_mission)
  wpSrv = rospy.Service('add_waypoint', Trigger, handle_add_waypoint)
  rospy.Service('waypoint_up', WaypointAction, handle_wp_up)
  rospy.Service('waypoint_down', WaypointAction, handle_wp_down)
  rospy.Service('waypoint_set_tag', WaypointAction, handle_wp_set_tag)
  rospy.Service('waypoint_remove', WaypointAction, handle_wp_remove)
  rospy.Service('waypoint_set_id', WaypointAction, handle_wp_set_id)
  rospy.Service('add_shortest_paths', Trigger, handle_add_shortest_paths)
  rospy.Service('clear_waypoint_visits', Trigger, handle_clear_visits)
  getPlanSrv = rospy.ServiceProxy('/move_base/make_plan', GetPlan)

  missionPub = rospy.Publisher('missions', MissionsMessage, queue_size=1, latch=True)
  cwpSub = rospy.Subscriber('add_waypoint', Pose, handle_new_waypoint)
  currentMissionPub = rospy.Publisher('current_mission', MissionMessage, queue_size=1, latch=True)
  tagSub = rospy.Subscriber('tag_detections', AprilTagDetectionArray, handle_tag_detections)
  missionMarkersPub = rospy.Publisher('mission_markers', MarkerArray, queue_size=1, latch=True)

  mbClient = actionlib.SimpleActionClient('move_base', MoveBaseAction)

  tfListener = tf.TransformListener()

  # Ensure missions directory exists
  if not os.path.exists(missionsPath):
    os.makedirs(missionsPath)

  publish_missions()
  publish_current_mission()

  print("Coordinator initialized.")
  r = rospy.Rate(5)
  while not rospy.is_shutdown():
      r.sleep()

if __name__ == '__main__':
  try:
      coordinator_main()
  except rospy.ROSInterruptException: pass

#!/usr/bin/env python

import rospy
import roslaunch
from herox_coordinator.msg import SubsystemStatus, SubsystemStatusSingle
from herox_coordinator.srv import SubsystemControl, SubsystemControlResponse

hwState = False
ctrlState = False
navState = False
teleopState = False

navLaunch = None

# Service handler
def handle_subsystem_control(req):
    global hwState
    global ctrlState
    global navState
    global teleopState
    global navLaunch

    rospy.loginfo(req)
    if req.name == "HW":
        hwState = req.status
    elif req.name == "CTRL":
        ctrlState = req.status
    elif req.name == "NAV":
        navState = req.status
    elif req.name == "TELEOP":
        teleopState = req.status
    
    return SubsystemControlResponse()

def coordinator():
    global hwState
    global ctrlState
    global navState
    global teleopState
    global navLaunch

    rospy.init_node('herox_coordinator')
    pub = rospy.Publisher('subsystem_status', SubsystemStatus)
    srv = rospy.Service('subsystem_control', SubsystemControl, handle_subsystem_control)

    r = rospy.Rate(1)

    subs = []
    
    sub = SubsystemStatusSingle()
    sub.name = "HW"
    subs.append(sub)

    sub = SubsystemStatusSingle()
    sub.name = "CTRL"
    subs.append(sub)


    sub = SubsystemStatusSingle()
    sub.name = "NAV"
    subs.append(sub)

    sub = SubsystemStatusSingle()
    sub.name = "TELEOP"
    subs.append(sub)

    msg = SubsystemStatus()
    msg.subsystems = subs

    while not rospy.is_shutdown():
        if navState and navLaunch == None:
            navLaunch = start_launchfile("/home/ros/catkin_ws/src/herox/herox_navigation/launch/gmapping_demo.launch")
        if not navState and navLaunch != None:
            stop_launchfile(navLaunch)
            navLaunch = None

        msg.subsystems[0].status = hwState
        msg.subsystems[1].status = ctrlState
        msg.subsystems[2].status = navState
        msg.subsystems[3].status = teleopState
        pub.publish(msg)
        r.sleep()

def start_launchfile(filename):
    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
    roslaunch.configure_logging(uuid)
    launch = roslaunch.parent.ROSLaunchParent(uuid, [filename])
    launch.start()
    rospy.loginfo("Started launchfile %s"%filename)
    return launch

def stop_launchfile(launch):
    rospy.loginfo("Shutting down launchfile")
    launch.shutdown()

if __name__ == '__main__':
    try:
        coordinator()
    except rospy.ROSInterruptException: pass

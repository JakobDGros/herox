#!/usr/bin/env python

#
# HEROX Launch Control
# Allows remote starting/stopping of launchfiles.
#

import rospy
import roslaunch
from herox_coordinator.msg import SubsystemStatus, SubsystemStatusSingle
from herox_coordinator.srv import SubsystemControl, SubsystemControlResponse

baseState = False
navState = False
teleopState = False

baseLaunch = None
navLaunch = None
teleopLaunch = None

class Subsystem:
  def __init__(self, name, launchfile):
    self.name = name
    self.launchfile = launchfile
    self.status = False
    self.launch_obj = None

  def update(self):
    if self.status:
      self.start()
    else:
      self.stop()

  def start(self):
      if self.launch_obj is not None:
        return

      uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
      roslaunch.configure_logging(uuid)
      self.launch_obj = roslaunch.parent.ROSLaunchParent(uuid, [self.launchfile])
      self.launch_obj.start()
      rospy.loginfo("Started launchfile %s"%self.name)

  def stop(self):
      if self.launch_obj is None:
        return

      rospy.loginfo("Shutting down launchfile %s"%self.name)
      self.launch_obj.shutdown()
      self.launch_obj = None
    

base_path = "/home/nvidia/catkin_ws/src/"

subsystems = [
  Subsystem("MOT", base_path + "herox_robot/herox_base/launch/motors.launch"),
  Subsystem("CTRL", base_path + "herox/herox_control/launch/control.launch"),
  Subsystem("LASER", base_path + "herox_robot/herox_base/launch/lasers.launch"),
  Subsystem("TELEOP", base_path + "herox/herox_control/launch/teleop.launch"),
  Subsystem("NAV", base_path + "herox/herox_navigation/launch/amcl_demo.launch"),
  Subsystem("COORD", base_path + "herox/herox_coordinator/launch/coordinator.launch")
]
  

# Service handler
def handle_subsystem_control(req):
    global baseState
    global navState
    global teleopState

    rospy.loginfo(req)

    for s in subsystems:
      if s.name == req.name:
        s.status = req.status
    
    return SubsystemControlResponse()

def launch_control():
    global baseState
    global navState
    global teleopState
    global baseLaunch
    global navLaunch
    global teleopLaunch

    rospy.init_node('herox_launch_control')
    pub = rospy.Publisher('subsystem_status', SubsystemStatus, queue_size=10)
    srv = rospy.Service('subsystem_control', SubsystemControl, handle_subsystem_control)

    r = rospy.Rate(1)

    subs = []
    for s in subsystems:
      status = SubsystemStatusSingle()
      status.name = s.name
      subs.append(status)

    msg = SubsystemStatus()
    msg.subsystems = subs

    print("Launch Control initialized.")
    while not rospy.is_shutdown():
        for i in range(len(subsystems)):
          subsys = subsystems[i]
          msg.subsystems[i].status = subsys.status
          subsys.update()

        pub.publish(msg)
        r.sleep()

if __name__ == '__main__':
    try:
        launch_control()
    except rospy.ROSInterruptException: pass
